#simulation based on projtile motion
import turtle
import math

# Constants
g = 9.81  # Acceleration due to gravity (m/s^2)

def draw_trajectory(v0, angle_deg):
    # Convert angle to radians
    angle_rad = math.radians(angle_deg)

    # Calculate projectile properties
    t_flight = 2 * v0 * math.sin(angle_rad) / g
    range_ = (v0 ** 2 * math.sin(2 * angle_rad)) / g
    max_height = (v0 * 2 * (math.sin(angle_rad) * 2)) / (2 * g)

    # Set up the screen
    screen = turtle.Screen()
    screen.title("Projectile Motion")
    screen.bgcolor("white")
    screen.setup(width=800, height=600)

    # Set up the turtle for drawing the trajectory
    traj_turtle = turtle.Turtle()
    traj_turtle.penup()
    traj_turtle.goto(-300, 0)  # Start position
    traj_turtle.pendown()
    traj_turtle.color("blue")

    # Draw the trajectory
    time_step = 0.1
    t = 0
    while t <= t_flight:
        x = (v0 * math.cos(angle_rad) * t)*2
        y = (v0 * math.sin(angle_rad) * t - 0.5 * g * t**2)*2
        traj_turtle.goto(x - 300, y)
        t += time_step

    # Hide the trajectory turtle
    traj_turtle.hideturtle()

    # Set up the turtle for displaying text
    info_turtle = turtle.Turtle()
    info_turtle.hideturtle()
    info_turtle.penup()

    # Position for displaying text
    base_y = -250
    line_spacing = 20

    # Display the information
    info_turtle.goto(-300, base_y)
    info_turtle.write(f"Range: {range_: .2f} meters", align="left", font=("Arial", 12, "normal"))

    info_turtle.goto(-300, base_y + line_spacing)
    info_turtle.write(f"Maximum Height: {max_height: .2f} meters", align="left", font=("Arial", 12, "normal"))

    info_turtle.goto(-300, base_y + 2 * line_spacing)
    info_turtle.write(f"Time of Flight: {t_flight: .2f} seconds", align="left", font=("Arial", 12, "normal"))

    # Finish
    screen.mainloop()

# Example usage
print("PROJECTILE MOTION SIMULATOR")
initial_velocity = float(input("Enter initial velocity of particle (m/s): "))  # m/s
launch_angle = float(input("Enter the angle of projection (in degrees): ")) # degrees

draw_trajectory(initial_velocity, launch_angle)
